#+TITLE: Emacs Init
#+PROPERTY: header-args+ :tangle yes
#+PROPERTY: header-args+ :results silent

* Prologue

#+BEGIN_SRC elisp
(provide 'td-init)
#+END_SRC

** How to install

- Install
  - git
  - [[http://www.djcbsoftware.nl/code/mu/mu4e/Installation.html][mu4e]]

#+BEGIN_SRC 
ln -s /usr/local/Cellar/mu/HEAD/share/emacs/site-lisp/mu/mu4e /usr/local/share/emacs/site-lisp/mu4e
#+END_SRC

- Tangle td-init.org
- Link from tothda/dotfiles
  - ~/.spacemacs
  - ~/.emacs.d/private/td-init.el
  - ~/.offlineimaprc
  - ~/.offlineimap.py
- Link from Dropbox
  - ~/.emacs.d/.cache/bookmarks
  - ~/.ssh/config
  - ~/Org

* Apperance

* Org


Enable some Org-Babel languages, and don't require confirmation when I run the
code blocks.

#+BEGIN_SRC elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sql . t)
     (sh . t)
     (http . t)
     (ledger . t)))

  (setq org-confirm-babel-evaluate nil)
#+END_SRC


Link abbreviations used in my org files. For example [[redmine:777]] written as

#+BEGIN_SRC 
[[redmine:777]]
#+END_SRC

#+BEGIN_SRC elisp
  (setq org-link-abbrev-alist
        '(("redmine"  . "http://redmine.dbx.hu/issues/")
          ("NAK" . "https://dbxkft.atlassian.net/browse/NAK-")))
#+END_SRC

Set up default Org directory.

#+BEGIN_SRC elisp
(setq org-directory "~/Org")
#+END_SRC

#+RESULTS:
: ~/Org

** Agenda

#+BEGIN_SRC elisp
  (setq org-agenda-files '("~/Org/DBX/"
                           "~/Org/DBX/mabisz"
                           "~/Org/DBX/dbx"
                           "~/Org/"))

  ; show two weeks in org agenda list
  (setq org-agenda-span 14)
#+END_SRC

** Capture

#+BEGIN_SRC elisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

#+BEGIN_SRC elisp
  (setq org-capture-templates
   '(("t" "Todo" entry (file+headline "~/Org/notes.org" "Tasks")
          "* TODO %?\n  %i\n  %a")
     ("j" "Journal" entry (file+datetree "~/Org/journal.org")
          "* %?\nEntered on %U\n  %i\n  %a")))
#+END_SRC

#+BEGIN_SRC elisp
  (setq org-refile-targets
        '((nil :maxlevel . 3)
          (org-agenda-files :maxlevel . 3)))
#+END_SRC

* Functions

** Split frame and open an exisitng buffer in the right window

#+BEGIN_SRC elisp
    (defun td-open-buffer-in-split-window (arg)
      (interactive "B")
      (split-window-right)
      (windmove-right)
      (switch-to-buffer arg))

  (defun td-open-ledger ()
    (interactive)
    )
#+END_SRC

* Keybindings

#+BEGIN_SRC elisp
(evil-leader/set-key "ob" 'td-open-buffer-in-split-window)
#+END_SRC
* Email


source: http://0xax.blogspot.hu/2014/11/emacs-mu4e-offlineimap-multiply-accounts.html

** mu4e settings

#+BEGIN_SRC elisp
  (setq mu4e-maildir "~/.Mail"
        mu4e-get-mail-command "offlineimap"
        mu4e-attachment-dir  "/tmp")

  (setq mu4e-drafts-folder "/Work/[Gmail].Drafts")
  (setq mu4e-sent-folder   "/Work/[Gmail].Sent Mail")
  (setq mu4e-trash-folder  "/Work/[Gmail].Trash")

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
#+END_SRC

** Maildir shortcuts

#+BEGIN_SRC elisp
(setq mu4e-maildir-shortcuts
    '( ("/Work/INBOX"               . ?i)
       ("/Work/[Gmail].Sent Mail"   . ?s)
       ("/Work/[Gmail].Trash"       . ?t)
       ("/Work/[Gmail].All Mail"    . ?a)))
#+END_SRC
** Mail accounts

#+BEGIN_SRC elisp
  (defvar my-mu4e-account-alist
    '(("Personal"
       ;; about me
       (user-mail-address      "tothda@gmail.com")
       (user-full-name         "T칩th D치vid")
       ;; smtp
       (smtpmail-stream-type starttls)
       (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
       (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "tothda@gmail.com" nil)))
       (smtpmail-default-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-service 587))
      ("Work"
       ;; about me
       (user-mail-address      "david.toth@dbx.hu")
       (user-full-name         "T칩th D치vid")
       ;; smtp
       (smtpmail-stream-type starttls)
       (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
       (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "david.toth@dbx.hu" nil)))
       (smtpmail-default-smtp-server "smtp.gmail.com")
       (smtpmail-smtp-service 587))))
#+END_SRC

Selecting from the accounts.

#+BEGIN_SRC elisp
  ;;
  ;; Found here - http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html
  ;;
  (defun my-mu4e-set-account ()
    "Set the account for composing a message."
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var))
                                                  my-mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                               nil t nil nil (caar my-mu4e-account-alist))))
           (account-vars (cdr (assoc account my-mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars)
        (error "No email account found"))))

  (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
#+END_SRC

** Org mode integration

#+BEGIN_SRC elisp
(require 'org-mu4e)
#+END_SRC
* Calendar

#+BEGIN_SRC elisp
  (require 'org-gcal)

  (setq org-gcal-client-id "430612536222-545sucupsdec9hpg2p81fvri83pdvjq6.apps.googleusercontent.com"
        org-gcal-client-secret "nm9QpjMLKoNFG6GK-Hb6w9DY"
        org-gcal-dir "~/Org/org-gcal/"
        org-gcal-file-alist '(("david.toth@dbx.hu" .  "~/Org/DBX/dbx-calendar.org")))
#+END_SRC
* Prodigy Services

#+BEGIN_SRC elisp
(prodigy-define-service
  :name "Glassfish"
  :command "./asadmin"
  :cwd "~/apps/glassfish4/bin"
  :url "http://localhost:12048/common/index.jsf"
  :args '("start-domain" "--verbose=true" "modules"))

(prodigy-define-service
  :name "ActiveMQ 5.13.0"
  :cwd "~/apps/apache-activemq-5.13.0"
  :command "./bin/activemq"
  :args '("console")
  :url "http://admin:admin@localhost:8161/admin/queues.jsp")
#+END_SRC
