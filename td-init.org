#+TITLE: Emacs Init
#+PROPERTY: header-args+ :tangle yes
#+PROPERTY: header-args+ :results silent

* Prologue

#+BEGIN_SRC elisp
(provide 'td-init)
#+END_SRC

** How to install

- install git
- link the Org folder in my Dropbox to ~/Org
  #+BEGIN_SRC sh :tangle no
    ln -s /Volumes/HDD/Dropbox/Org ~/Org
    ln -s /Volumes/HDD/Dropbox/DBX/Org/ ~/Org/DBX
  #+END_SRC
- link .spacemacs
- link bookmark file
- tangle td-init.org
- copy =td-init.el= to ~/.emacs.d/private
- [[http://www.djcbsoftware.nl/code/mu/mu4e/Installation.html][Install mu4e]]
- link .offlineimaprc and .offlineimap.py

* Apperance

* Org config


Enable some Org-Babel languages, and don't require confirmation when I run the
code blocks.

#+BEGIN_SRC elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sql . t)
     (sh . t)
     (http . t)
     (ledger . t)))

  (setq org-confirm-babel-evaluate nil)
#+END_SRC


Link abbreviations used in my org files. For example [[redmine:777]] written as

#+BEGIN_SRC 
[[redmine:777]]
#+END_SRC

#+BEGIN_SRC elisp
  (setq org-link-abbrev-alist
        '(("redmine"  . "http://redmine.dbx.hu/issues/")
          ("NAK" . "https://dbxkft.atlassian.net/browse/NAK-")))
#+END_SRC

Set up default Org directory.

#+BEGIN_SRC elisp
(setq org-directory "~/Org")
#+END_SRC

#+RESULTS:
: ~/Org

** Agenda

#+BEGIN_SRC elisp
  (setq org-agenda-files '("~/Org/DBX/"
                           "~/Org/DBX/mabisz"
                           "~/Org/DBX/dbx"
                           "~/Org/"))
#+END_SRC

** Capture

#+BEGIN_SRC elisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

#+BEGIN_SRC elisp
  (setq org-capture-templates
   '(("t" "Todo" entry (file+headline "~/Org/notes.org" "Tasks")
          "* TODO %?\n  %i\n  %a")
     ("j" "Journal" entry (file+datetree "~/Org/journal.org")
          "* %?\nEntered on %U\n  %i\n  %a")))
#+END_SRC

#+BEGIN_SRC elisp
  (setq org-refile-targets
        '((nil :maxlevel . 3)
          (org-agenda-files :maxlevel . 3)))
#+END_SRC

* Functions

** Split frame and open an exisitng buffer in the right window

#+BEGIN_SRC elisp
    (defun td-open-buffer-in-split-window (arg)
      (interactive "B")
      (split-window-right)
      (windmove-right)
      (switch-to-buffer arg))

  (defun td-open-ledger ()
    (interactive)
    )
#+END_SRC

* Keybindings

#+BEGIN_SRC elisp
(evil-leader/set-key "ob" 'td-open-buffer-in-split-window)
#+END_SRC
* Email

#+BEGIN_SRC elisp
(setq mu4e-maildir "~/.Mail")

(setq mu4e-drafts-folder "/Work/[Gmail].Drafts")
(setq mu4e-sent-folder   "/Work/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/Work/[Gmail].Trash")

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)


(setq mu4e-maildir-shortcuts
    '( ("/Work/INBOX"               . ?i)
       ("/Work/[Gmail].Sent Mail"   . ?s)
       ("/Work/[Gmail].Trash"       . ?t)
       ("/Work/[Gmail].All Mail"    . ?a)))

(setq mu4e-get-mail-command "offlineimap")

(setq
   user-mail-address "david.toth@dbx.hu"
   user-full-name  "Tóth Dávid")

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

(require 'org-mu4e)
#+END_SRC
